package fudex.bonyad.Helper

import android.os.Build
import java.io.BufferedReader
import java.io.File
import java.io.InputStreamReader

object CheckDeviceRooted {
    /*
        Check for Test-Keys: Test-Keys has to do with how the kernel is signed when it is compiled.
        By default, stock Android ROMs from Google are built with release-keys tags.
        Test-Keys means it is signed with a custom key generated by a third-party developer.
        Specifically, it will check in build properties(“android.os.Build.TAGS”) for test-keys.
    */
     fun detectTestKeys(): Boolean {
        val buildTags = Build.TAGS
        return buildTags != null && buildTags.contains("test-keys")
    }

    /*
        Check for “su” binary: Su binary check is to identify the superuser in the device.
        This binary is installed when you try to root your phone using apps like kinguser or via fastboot in Android.
        These files are necessary so that one can root their phone and become the superuser.
        The existence of this binary can be checked from the following paths.
    */
     fun checkForSuBinary(): Boolean {
        return checkForBinary("su") // function is available below
    }

    /*
        Check for “busybox” binary: If a device has been rooted, more often than not Busybox has been installed as well.
        Busybox is a binary that provides many common Linux commands.
        Running busybox is a good indication that a device has been rooted.
    */
     fun checkForBusyBoxBinary(): Boolean {
        return checkForBinary("busybox") //function is available below
    }

    /**
     * @param filename - check for this existence of this
     * file("su","busybox")
     * @return true if exists
     */
    private fun checkForBinary(filename: String): Boolean {
        for (path in binaryPaths) {
            val f = File(path, filename)
            val fileExists: Boolean = f.exists()
            if (fileExists) {
                return true
            }
        }
        return false
    }

    /**
     * A variation on the checking for SU, this attempts a 'which su'
     * different file system check for the su binary
     * @return true if su exists
     */
     fun checkSuExists(): Boolean {
        var process: Process? = null
        return try {
            process = Runtime.getRuntime().exec(arrayOf("/system /xbin/which", "su"))
            val `in` = BufferedReader(
                InputStreamReader(process.inputStream)
            )
            val line: String = `in`.readLine()
            process.destroy()
            line != null
        } catch (e: Exception) {
            process?.destroy()
            false
        }
    }

    /*
        The following paths, Su and busybox binaries are often looked for on rooted devices.
    */
    private val binaryPaths = arrayOf(
        "/data/local/",
        "/data/local/bin/",
        "/data/local/xbin/",
        "/sbin/",
        "/su/bin/",
        "/system/bin/",
        "/system/bin/.ext/",
        "/system/bin/failsafe/",
        "/system/sd/xbin/",
        "/system/usr/we-need-root/",
        "/system/xbin/",
        "/system/app/Superuser.apk",
        "/cache",
        "/data",
        "/dev"
    )
}